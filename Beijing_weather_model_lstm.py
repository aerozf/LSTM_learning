# -*- coding: utf-8 -*-
"""
Created on Mon Feb  5 19:51:23 2018

@author: Maohan
"""

import numpy as np
import torch
from torch import nn
from torch.autograd import Variable
#import pandas as pd
import matplotlib.pyplot as plt#matplotlib inline


'''numpy数据预处理'''
########################################################################################################################
dataset=[]
raw_data=[[-4.0, -2.0, -5.0, -3.0, -4.0, -3.0, -5.0, -9.0, -9.0, -8.0, -5.0, -9.0, -7.0, -7.0, -4.0, -4.0, -6.0, -4.0, -4.0, -5.0, -6.0, -4.0, -3.0, -3.0, -5.0, -5.0, -5.0, -5.0, -2.0, -4.0, -2.0], [-1.0, -4.0, -7.0, -7.0, -5.0, -4.0, -5.0, -9.0, -11.0, -10.0, -9.0, -7.0, -6.0, -5.0, -4.0, -4.0, -4.0, -4.0, -5.0, -4.0, -2.0, 0.0, -1.0, 1.0, 2.0, 2.0, -3.0, -2.0], [-2.0, -2.0, 1.0, -3.0, -3.0, -3.0, -1.0, -2.0, -2.0, 2.0, 3.0, -2.0, 3.0, 2.0, 5.0, 5.0, 5.0, 6.0, 5.0, 4.0, 5.0, 6.0, 6.0, 8.0, 9.0, 10.0, 13.0, 11.0, 8.0, 10.0, 9.0], [11.0, 10.0, 7.0, 8.0, 6.0, 9.0, 10.0, 12.0, 11.0, 11.0, 11.0, 9.0, 12.0, 15.0, 12.0, 12.0, 11.0, 12.0, 8.0, 10.0, 10.0, 13.0, 16.0, 16.0, 12.0, 9.0, 11.0, 11.0, 13.0, 16.0], [14.0, 12.0, 10.0, 7.0, 8.0, 10.0, 12.0, 14.0, 15.0, 10.0, 8.0, 16.0, 16.0, 10.0, 16.0, 15.0, 16.0, 19.0, 17.0, 18.0, 19.0, 22.0, 20.0, 19.0, 16.0, 19.0, 19.0, 22.0, 23.0, 22.0, 24.0], [19.0, 17.0, 20.0, 21.0, 23.0, 18.0, 17.0, 17.0, 17.0, 17.0, 18.0, 21.0, 21.0, 22.0, 23.0, 21.0, 20.0, 20.0, 19.0, 19.0, 19.0, 18.0, 20.0, 22.0, 21.0, 23.0, 21.0, 22.0, 23.0, 24.0], [21.0, 22.0, 23.0, 23.0, 23.0, 24.0, 24.0, 23.0, 22.0, 24.0, 22.0, 22.0, 22.0, 23.0, 24.0, 23.0, 24.0, 25.0, 26.0, 26.0, 26.0, 24.0, 23.0, 24.0, 22.0, 25.0, 24.0, 24.0, 22.0, 24.0, 24.0], [25.0, 26.0, 24.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 19.0, 18.0, 20.0, 20.0, 22.0, 21.0, 21.0, 22.0, 23.0, 23.0, 22.0, 22.0, 19.0, 19.0, 20.0, 20.0, 19.0, 19.0, 19.0, 20.0], [19.0, 18.0, 18.0, 17.0, 19.0, 21.0, 21.0, 17.0, 16.0, 18.0, 18.0, 17.0, 19.0, 15.0, 13.0, 14.0, 13.0, 14.0, 16.0, 16.0, 17.0, 17.0, 15.0, 14.0, 17.0, 15.0, 15.0, 16.0, 10.0, 11.0], [10.0, 11.0, 12.0, 12.0, 8.0, 9.0, 11.0, 13.0, 14.0, 13.0, 14.0, 6.0, 4.0, 7.0, 6.0, 7.0, 8.0, 11.0, 10.0, 9.0, 7.0, 8.0, 12.0, 11.0, 12.0, 4.0, 3.0, 6.0, 9.0, 9.0, 9.0], [6.0, 2.0, 5.0, 6.0, 6.0, 2.0, 2.0, 0.0, 1.0, 3.0, 2.0, -1.0, -2.0, 0.0, 1.0, 0.0, -2.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -2.0, -1.0, 1.0, 0.0, -1.0, 2.0, -6.0], [-7.0, -7.0, -7.0, -8.0, -6.0, -4.0, -7.0, -6.0, -3.0, -5.0, -4.0, -7.0, -7.0, -5.0, -5.0, -6.0, -7.0, -4.0, -5.0, -6.0, -6.0, -5.0, -1.0, -5.0, -5.0, -5.0, -5.0, -4.0, -4.0, -5.0, -8.0], [-5.0, -6.0, -5.0, -1.0, -4.0, -6.0, -6.0, -3.0, -5.0, -3.0, -6.0, -5.0, -5.0, -5.0, -3.0, -7.0, -5.0, -6.0, -5.0, -2.0, -7.0, -6.0, -3.0, -5.0, -4.0, -7.0, -7.0, -5.0, -6.0, -8.0, -7.0], [-6.0, -5.0, -2.0, -3.0, -4.0, -1.0, -7.0, -6.0, -4.0, -1.0, -4.0, -5.0, -3.0, -1.0, -1.0, -1.0, -1.0, -3.0, -2.0, -1.0, -3.0, -5.0, -6.0, -1.0, -5.0, -5.0, -2.0, -3.0], [-3.0, -2.0, -4.0, -5.0, -3.0, -2.0, 0.0, -2.0, -6.0, -3.0, -4.0, -2.0, 0.0, 2.0, 3.0, 6.0, 3.0, 5.0, 5.0, 6.0, 6.0, 1.0, 3.0, 3.0, 6.0, 8.0, 9.0, 8.0, 9.0, 11.0, 5.0], [3.0, 4.0, 5.0, 9.0, 4.0, 2.0, 4.0, 5.0, 5.0, 8.0, 5.0, 6.0, 5.0, 10.0, 13.0, 8.0, 12.0, 11.0, 6.0, 10.0, 9.0, 14.0, 10.0, 12.0, 15.0, 17.0, 15.0, 14.0, 14.0, 16.0], [14.0, 14.0, 10.0, 13.0, 12.0, 12.0, 14.0, 11.0, 10.0, 9.0, 10.0, 11.0, 19.0, 15.0, 12.0, 16.0, 16.0, 16.0, 17.0, 15.0, 16.0, 17.0, 19.0, 21.0, 21.0, 21.0, 21.0, 21.0, 18.0, 19.0, 23.0], [23.0, 17.0, 22.0, 17.0, 20.0, 18.0, 17.0, 20.0, 20.0, 18.0, 18.0, 19.0, 17.0, 19.0, 22.0, 22.0, 20.0, 20.0, 16.0, 19.0, 21.0, 22.0, 22.0, 22.0, 21.0, 21.0, 23.0, 24.0, 20.0, 18.0], [18.0, 18.0, 20.0, 19.0, 20.0, 22.0, 21.0, 22.0, 23.0, 24.0, 24.0, 25.0, 26.0, 23.0, 23.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 21.0, 21.0, 22.0, 23.0, 23.0, 23.0, 22.0, 23.0, 22.0, 22.0], [23.0, 24.0, 21.0, 22.0, 22.0, 22.0, 23.0, 23.0, 22.0, 22.0, 23.0, 24.0, 24.0, 22.0, 22.0, 23.0, 22.0, 20.0, 20.0, 20.0, 21.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 20.0, 19.0, 18.0], [18.0, 18.0, 21.0, 19.0, 17.0, 17.0, 17.0, 18.0, 19.0, 14.0, 15.0, 12.0, 15.0, 14.0, 15.0, 16.0, 18.0, 16.0, 15.0, 17.0, 18.0, 14.0, 17.0, 16.0, 13.0, 15.0, 15.0, 14.0, 13.0, 14.0], [10.0, 12.0, 12.0, 13.0, 15.0, 16.0, 13.0, 7.0, 8.0, 10.0, 8.0, 9.0, 11.0, 10.0, 12.0, 12.0, 13.0, 10.0, 12.0, 10.0, 9.0, 8.0, 8.0, 7.0, 9.0, 6.0, 4.0, 5.0, 3.0, 1.0, 2.0], [3.0, 4.0, 5.0, 9.0, 2.0, 1.0, 4.0, 1.0, 3.0, 4.0, 6.0, 6.0, 6.0, 7.0, 6.0, 1.0, 2.0, 2.0, 1.0, -1.0, -2.0, -4.0, -6.0, -8.0, -9.0, -8.0, -6.0, -4.0, -5.0, -3.0], [-3.0, -3.0, -4.0, -4.0, -3.0, -2.0, -2.0, 1.0, 1.0, -4.0, -3.0, -3.0, -1.0, -2.0, -3.0, -7.0, -6.0, -5.0, -4.0, -5.0, -4.0, -5.0, -5.0, -6.0, -4.0, -7.0, -7.0, -6.0, -4.0, -6.0, -6.0], [-4.0, -5.0, -3.0, -6.0, -7.0, -6.0, -7.0, -8.0, -6.0, -8.0, -8.0, -9.0, -7.0, -7.0, -5.0, -6.0, -10.0, -13.0, -10.0, -8.0, -10.0, -17.0, -14.0, -11.0, -8.0, -9.0, -7.0, -7.0, -7.0, -10.0, -9.0], [-8.0, -7.0, -5.0, -6.0, -4.0, -6.0, -4.0, -3.0, -3.0, -1.0, -1.0, 2.0, -6.0, -7.0, -4.0, -4.0, -2.0, -2.0, -5.0, -6.0, -4.0, -3.0, -6.0, -4.0, -5.0, -2.0, -3.0, -4.0, -4.0], [-2.0, 2.0, 4.0, 4.0, -1.0, -2.0, -1.0, -2.0, -4.0, -4.0, -2.0, 1.0, -2.0, 3.0, 2.0, 6.0, 6.0, 4.0, 3.0, 4.0, 8.0, 5.0, 2.0, 3.0, 4.0, 5.0, 5.0, 8.0, 7.0, 7.0, 14.0], [11.0, 8.0, 6.0, 8.0, 11.0, 12.0, 9.0, 10.0, 8.0, 5.0, 8.0, 8.0, 10.0, 10.0, 13.0, 11.0, 10.0, 8.0, 9.0, 10.0, 15.0, 10.0, 8.0, 16.0, 14.0, 13.0, 12.0, 13.0, 15.0, 15.0], [17.0, 10.0, 10.0, 15.0, 14.0, 12.0, 12.0, 15.0, 12.0, 17.0, 19.0, 9.0, 13.0, 11.0, 10.0, 15.0, 17.0, 18.0, 15.0, 16.0, 15.0, 18.0, 13.0, 17.0, 17.0, 16.0, 18.0, 18.0, 18.0, 22.0, 17.0], [18.0, 18.0, 19.0, 19.0, 18.0, 19.0, 16.0, 19.0, 22.0, 20.0, 18.0, 20.0, 18.0, 18.0, 17.0, 22.0, 20.0, 20.0, 23.0, 22.0, 24.0, 23.0, 21.0, 22.0, 22.0, 24.0, 21.0, 20.0, 22.0, 22.0], [21.0, 21.0, 23.0, 21.0, 22.0, 22.0, 23.0, 24.0, 25.0, 26.0, 24.0, 23.0, 24.0, 22.0, 20.0, 22.0, 23.0, 23.0, 22.0, 20.0, 23.0, 25.0, 26.0, 24.0, 23.0, 24.0, 25.0, 23.0, 25.0, 25.0, 24.0], [25.0, 24.0, 25.0, 25.0, 25.0, 24.0, 23.0, 23.0, 24.0, 26.0, 27.0, 25.0, 24.0, 24.0, 20.0, 22.0, 23.0, 22.0, 22.0, 22.0, 23.0, 24.0, 24.0, 24.0, 18.0, 17.0, 20.0, 18.0, 19.0, 19.0, 20.0], [19.0, 18.0, 20.0, 18.0, 20.0, 21.0, 20.0, 18.0, 19.0, 19.0, 18.0, 19.0, 19.0, 20.0, 21.0, 20.0, 18.0, 15.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 19.0, 18.0, 12.0, 10.0, 12.0, 14.0], [15.0, 16.0, 16.0, 13.0, 13.0, 14.0, 11.0, 5.0, 8.0, 9.0, 10.0, 10.0, 12.0, 13.0, 11.0, 12.0, 10.0, 12.0, 13.0, 11.0, 10.0, 7.0, 5.0, 6.0, 10.0, 9.0, 6.0, 2.0, 2.0, 3.0, -2.0], [-2.0, 0.0, 2.0, 4.0, 3.0, 4.0, 2.0, -1.0, 2.0, 1.0, 1.0, 2.0, 3.0, -2.0, 0.0, 2.0, 4.0, 6.0, 3.0, -1.0, -9.0, -8.0, -6.0, -6.0, -5.0, -4.0, -4.0, -4.0, -3.0, -1.0], [-4.0, -3.0, -2.0, -2.0, -5.0, -3.0, -2.0, -2.0, -5.0, -4.0, -1.0, -3.0, -6.0, -6.0, -6.0, -5.0, -4.0, -4.0, -4.0, -2.0, -3.0, -5.0, -6.0, -5.0, -2.0, -7.0, -7.0, -7.0, -7.0, -6.0, -6.0], [-3.0, -6.0, -5.0, -5.0, -4.0, -2.0, -3.0, -4.0, -5.0, -6.0, -5.0, -4.0, -4.0, -7.0, -6.0, -5.0, -5.0, -4.0, -8.0, -8.0, -9.0, -10.0, -8.0, -7.0, -4.0, -6.0, -5.0, -3.0, -8.0, -5.0, -4.0], [-7.0, -5.0, -3.0, -2.0, -4.0, -5.0, -3.0, -7.0, -5.0, -6.0, -5.0, -3.0, -4.0, -3.0, 1.0, -3.0, -4.0, -1.0, -2.0, -2.0, -3.0, -3.0, -4.0, -2.0, 0.0, -2.0, 2.0, 2.0], [-3.0, -2.0, -2.0, 0.0, -1.0, -3.0, -1.0, 1.0, 1.0, 3.0, 5.0, 1.0, 2.0, 2.0, 3.0, 6.0, 5.0, 5.0, 7.0, 6.0, 4.0, 6.0, 2.0, 0.0, 4.0, 4.0, 5.0, 4.0, 7.0, 5.0, 5.0], [5.0, 6.0, 12.0, 12.0, 9.0, 11.0, 14.0, 7.0, 8.0, 10.0, 7.0, 9.0, 8.0, 11.0, 14.0, 13.0, 12.0, 10.0, 11.0, 10.0, 9.0, 13.0, 10.0, 11.0, 8.0, 11.0, 13.0, 15.0, 17.0, 13.0], [15.0, 17.0, 16.0, 14.0, 11.0, 12.0, 15.0, 16.0, 15.0, 15.0, 13.0, 17.0, 16.0, 15.0, 15.0, 17.0, 19.0, 21.0, 22.0, 20.0, 18.0, 13.0, 14.0, 17.0, 16.0, 17.0, 21.0, 22.0, 18.0, 16.0, 18.0], [17.0, 13.0, 16.0, 19.0, 15.0, 14.0, 17.0, 20.0, 21.0, 17.0, 18.0, 18.0, 17.0, 21.0, 24.0, 24.0, 25.0, 23.0, 20.0, 22.0, 21.0, 20.0, 19.0, 18.0, 20.0, 21.0, 22.0, 24.0, 24.0, 25.0], [24.0, 24.0, 24.0, 23.0, 23.0, 23.0, 23.0, 25.0, 25.0, 24.0, 26.0, 27.0, 25.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 23.0, 24.0, 24.0, 24.0, 23.0, 22.0, 19.0, 23.0, 22.0, 21.0, 21.0, 23.0], [24.0, 24.0, 24.0, 25.0, 23.0, 24.0, 24.0, 23.0, 23.0, 24.0, 23.0, 22.0, 23.0, 23.0, 23.0, 22.0, 22.0, 22.0, 22.0, 23.0, 24.0, 22.0, 22.0, 20.0, 19.0, 19.0, 17.0, 17.0, 16.0, 19.0, 20.0], [19.0, 19.0, 19.0, 20.0, 18.0, 18.0, 19.0, 21.0, 21.0, 19.0, 16.0, 19.0, 20.0, 20.0, 18.0, 18.0, 16.0, 18.0, 14.0, 14.0, 17.0, 14.0, 17.0, 18.0, 19.0, 13.0, 10.0, 11.0, 11.0, 16.0], [13.0, 8.0, 10.0, 10.0, 11.0, 13.0, 13.0, 13.0, 9.0, 6.0, 6.0, 6.0, 9.0, 9.0, 8.0, 7.0, 11.0, 9.0, 9.0, 11.0, 10.0, 7.0, 5.0, 8.0, 9.0, 9.0, 10.0, 5.0, 1.0, 2.0, 4.0], [6.0, 3.0, 0.0, 3.0, 4.0, 4.0, 4.0, 4.0, 5.0, -1.0, 0.0, 0.0, 0.0, -4.0, -2.0, -1.0, -4.0, -6.0, -5.0, -3.0, -2.0, -5.0, -4.0, -5.0, -4.0, -4.0, -4.0, -5.0, -6.0, -6.0], [-6.0, -4.0, -5.0, -6.0, -4.0, -4.0, -5.0, -4.0, -4.0, -5.0, -8.0, -8.0, -5.0, -4.0, -6.0, -8.0, -4.0, -6.0, -4.0, -5.0, -6.0, -6.0, -3.0, -6.0, -4.0, -6.0, -5.0, -4.0, -4.0, -6.0, -6.0], [-6.0, -6.0, -5.0, -5.0, -7.0, -6.0, -4.0, -4.0, -6.0, -8.0, -10.0, -10.0, -8.0, -7.0, -5.0, -5.0, -5.0, -7.0, -6.0, -4.0, -6.0, -5.0, -10.0, -12.0, -11.0, -11.0, -10.0, -9.0, -9.0, -8.0, -6.0, -8.0], [-7.0, -9.0, -9.0, -8.0, -10.0, -7.0, -9.0, -7.0, -9.0, -9.0, -8.0, -7.0, -4.0, -6.0, -5.0, -5.0, -4.0, -3.0, -3.0, -5.0, -4.0, -5.0, -4.0, -6.0, -3.0, -1.0, 0.0, -2.0], [-3.0, -1.0, 3.0, -2.0, -4.0, -3.0, -2.0, -4.0, -2.0, -3.0, 0.0, 3.0, 5.0, 6.0, -1.0, -1.0, -1.0, 1.0, 2.0, -2.0, 1.0, 4.0, 5.0, 5.0, 7.0, 8.0, 11.0, 9.0, 7.0, 8.0, 9.0], [11.0, 11.0, 4.0, 0.0, 3.0, 4.0, 2.0, 5.0, 7.0, 8.0, 9.0, 7.0, 6.0, 5.0, 8.0, 11.0, 12.0, 14.0, 13.0, 14.0, 12.0, 12.0, 9.0, 10.0, 11.0, 12.0, 12.0, 17.0, 17.0, 13.0], [13.0, 13.0, 10.0, 16.0, 15.0, 14.0, 12.0, 13.0, 16.0, 18.0, 15.0, 16.0, 17.0, 22.0, 22.0, 21.0, 19.0, 17.0, 16.0, 16.0, 17.0, 15.0, 16.0, 17.0, 19.0, 17.0, 18.0, 16.0, 16.0, 18.0, 19.0], [22.0, 21.0, 20.0, 21.0, 25.0, 25.0, 22.0, 25.0, 17.0, 17.0, 19.0, 19.0, 18.0, 19.0, 20.0, 21.0, 22.0, 21.0, 20.0, 21.0, 23.0, 21.0, 25.0, 25.0, 24.0, 25.0, 25.0, 24.0, 25.0, 23.0], [23.0, 23.0, 24.0, 25.0, 24.0, 23.0, 23.0, 23.0, 23.0, 22.0, 27.0, 22.0, 22.0, 24.0, 24.0, 25.0, 24.0, 23.0, 25.0, 26.0, 27.0, 26.0, 25.0, 25.0, 24.0, 25.0, 25.0, 23.0, 24.0, 25.0, 25.0, 27.0], [27.0, 27.0, 26.0, 27.0, 25.0, 20.0, 24.0, 24.0, 24.0, 25.0, 23.0, 24.0, 24.0, 24.0, 24.0, 21.0, 22.0, 23.0, 23.0, 22.0, 22.0, 20.0, 21.0, 20.0, 22.0, 22.0, 22.0, 22.0, 20.0, 20.0, 19.0], [19.0, 19.0, 19.0, 18.0, 20.0, 18.0, 16.0, 15.0, 16.0, 19.0, 19.0, 18.0, 20.0, 19.0, 15.0, 14.0, 16.0, 17.0, 17.0, 16.0, 14.0, 13.0, 12.0, 11.0, 12.0, 14.0, 12.0, 11.0, 10.0, 13.0], [12.0, 10.0, 10.0, 12.0, 14.0, 8.0, 7.0, 9.0, 3.0, 4.0, 5.0, 8.0, 8.0, 10.0, 11.0, 7.0, 5.0, 5.0, 5.0, 7.0, 6.0, 5.0, 4.0, 6.0, 8.0, 3.0, 5.0, 4.0, 3.0, 1.0, 3.0], [3.0, 4.0, 6.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 2.0, 1.0, 2.0, 5.0, 5.0, 1.0, -2.0, -2.0, -3.0, -2.0, -1.0, -3.0, -3.0, 0.0, -3.0, -3.0, 0.0, -3.0, -3.0, -4.0, -3.0], [0.0, 2.0, -3.0, -6.0, -4.0, -9.0, -10.0, -10.0, -10.0, -7.0, -10.0, -8.0, -7.0, -6.0, -6.0, -4.0, -5.0, -4.0, -5.0, -4.0, -2.0, -6.0, -9.0, -8.0, -9.0, -11.0, -12.0, -11.0, -12.0, -11.0, -10.0], [-10.0, -9.0, -7.0, -7.0, -8.0, -7.0, -7.0, -10.0, -9.0, -7.0, -6.0, -5.0, -7.0, -8.0, -10.0, -8.0, -7.0, -6.0, -5.0, -7.0, -4.0, -3.0, -4.0, -5.0, -6.0, -5.0, -5.0, -4.0, -4.0, -7.0, -8.0], [-5.0, -3.0, -7.0, -6.0, -5.0, -7.0, -10.0, -7.0, -8.0, -8.0, -6.0, -7.0, -6.0, -6.0, -7.0, -6.0, -4.0, -3.0, -4.0, -4.0, -3.0, -2.0, -2.0, -1.0, -2.0, -2.0, -2.0, -1.0], [1.0, 3.0, 1.0, 2.0, 4.0, -2.0, -1.0, 3.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 0.0, 2.0, 4.0, 6.0, 12.0, 6.0, 0.0, 3.0, 2.0, 4.0, 5.0, 4.0, 4.0, 2.0, 4.0, 0.0, 2.0], [4.0, 3.0, 8.0, 9.0, 8.0, 6.0, 7.0, 5.0, 3.0, 9.0, 6.0, 9.0, 7.0, 8.0, 12.0, 13.0, 16.0, 10.0, 10.0, 8.0, 8.0, 14.0, 15.0, 9.0, 8.0, 10.0, 6.0, 9.0, 13.0, 12.0], [10.0, 14.0, 16.0, 16.0, 10.0, 10.0, 14.0, 13.0, 14.0, 14.0, 14.0, 11.0, 12.0, 16.0, 16.0, 19.0, 20.0, 18.0, 13.0, 13.0, 14.0, 17.0, 21.0, 21.0, 22.0, 17.0, 14.0, 16.0, 22.0, 15.0, 19.0], [18.0, 20.0, 19.0, 19.0, 19.0, 18.0, 21.0, 20.0, 18.0, 18.0, 20.0, 22.0, 20.0, 20.0, 19.0, 18.0, 20.0, 22.0, 22.0, 23.0, 21.0, 22.0, 23.0, 23.0, 25.0, 23.0, 23.0, 22.0, 23.0, 21.0], [22.0, 23.0, 24.0, 25.0, 22.0, 21.0, 20.0, 22.0, 21.0, 19.0, 21.0, 22.0, 23.0, 23.0, 24.0, 24.0, 23.0, 24.0, 25.0, 24.0, 27.0, 25.0, 25.0, 27.0, 26.0, 26.0, 27.0, 26.0, 23.0, 24.0, 24.0], [24.0, 24.0, 24.0, 23.0, 24.0, 24.0, 24.0, 25.0, 23.0, 23.0, 24.0, 23.0, 22.0, 22.0, 22.0, 22.0, 19.0, 21.0, 22.0, 19.0, 21.0, 20.0, 19.0, 18.0, 20.0, 19.0, 20.0, 20.0, 20.0, 18.0, 18.0], [19.0, 19.0, 20.0, 19.0, 20.0, 20.0, 21.0, 22.0, 21.0, 18.0, 18.0, 19.0, 18.0, 17.0, 17.0, 16.0, 15.0, 14.0, 16.0, 16.0, 16.0, 16.0, 17.0, 15.0, 15.0, 15.0, 16.0, 17.0, 18.0, 19.0], [18.0, 17.0, 13.0, 8.0, 8.0, 9.0, 10.0, 9.0, 12.0, 12.0, 13.0, 9.0, 5.0, 3.0, 6.0, 9.0, 7.0, 7.0, 10.0, 7.0, 6.0, 7.0, 10.0, 7.0, 1.0, 3.0, 5.0, 2.0, 2.0, 6.0, 5.0], [8.0, 8.0, 4.0, 5.0, 6.0, 5.0, 1.0, 2.0, 7.0, 5.0, 5.0, 5.0, -3.0, -2.0, 1.0, 4.0, -4.0, -5.0, -4.0, -3.0, -1.0, 2.0, 5.0, -5.0, -5.0, -4.0, -6.0, -5.0, -4.0, -5.0], [-5.0, -4.0, -4.0, -4.0, -6.0, -5.0, -6.0, -5.0, -5.0, -4.0, -6.0, -5.0, -5.0, -3.0, -2.0, -3.0, -6.0, -6.0, -9.0, -7.0, -6.0, -5.0, -4.0, -6.0, -6.0, -7.0, -6.0, -6.0, -8.0, -12.0, -10.0]]
for r in raw_data:
    for i in r:
        dataset.append(i)
        
#加这一行用来预测2020年北京一月的最低气温        
for i in raw_data[-1]:
    dataset.append(i)
    
dataset=np.array(dataset)
dataset = dataset.astype('float32')
max_value = np.max(dataset)
min_value = np.min(dataset)
scalar = max_value - min_value
dataset = list(map(lambda x: x / scalar, dataset))
    
    
def create_dataset(dataset, look_back=3):
    dataX, dataY = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back)]
        dataX.append(a)
        dataY.append(dataset[i + look_back])
    return np.array(dataX), np.array(dataY)

data_X, data_Y = create_dataset(dataset)

train_size = int(len(data_X)*0.8)
test_size = len(data_X) - train_size
train_X = data_X[:train_size]
train_Y = data_Y[:train_size]
test_X = data_X[train_size:]
test_Y = data_Y[train_size:]

train_X = train_X.reshape(-1, 1, 3)
train_Y = train_Y.reshape(-1, 1, 1)
test_X = test_X.reshape(-1, 1, 3)
########################################################################################################################


'''torch数据训练'''
########################################################################################################################
#从这里开始用到torch模块处理
train_x = torch.from_numpy(train_X)
train_y = torch.from_numpy(train_Y)
test_x = torch.from_numpy(test_X)

# 定义模型
class lstm_reg(nn.Module):
    def __init__(self, input_size, hidden_size, output_size=1, num_layers=2):
        super(lstm_reg, self).__init__()
        
        self.rnn = nn.LSTM(input_size, hidden_size, num_layers) # rnn
        self.reg = nn.Linear(hidden_size, output_size) # 回归
        
    def forward(self, x):
        x, _ = self.rnn(x) # (seq, batch, hidden)
        s, b, h = x.shape
        x = x.view(s*b, h) # 转换成线性层的输入格式
        x = self.reg(x)
        x = x.view(s, b, -1)
        return x
    
net = lstm_reg(3, 20)
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(net.parameters(), lr=1e-2)
var_x = Variable(train_x)
var_y = Variable(train_y)
# 开始训练
for e in range(1000):
    # 前向传播
    out = net(var_x)
    loss = criterion(out, var_y)
    # 反向传播
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if (e + 1) % 100 == 0: # 每 100 次输出结果
        print('Epoch: {}, Loss: {:.10f}'.format(e + 1, loss))
        
########################################################################################################################


        
#保存模型训练的数据
torch.save(net, 'net.pkl')  # 保存整个网络
torch.save(net.state_dict(), 'net_params.pkl')


net = net.eval() # 转换成测试模式
data_X = data_X.reshape(-1, 1, 3)
data_X = torch.from_numpy(data_X)
var_data = Variable(data_X)
pred_test = net(var_data) # 测试集的预测结果
# 改变输出的格式
pred_test = pred_test.view(-1).data.numpy()
# 画出实际结果和预测的结果
plt.plot(pred_test[-26:]*44.0, 'r', label='prediction')
#plt.plot(np.array(dataset[-60:])*44.0, 'b', label='real')
#plt.plot([train_size],[0],'ro')
plt.title('BeiJing weather model & weather facast')
plt.xlabel("iteration number")
plt.ylabel("minimum air tempurature (degree centigrade)")
plt.legend(loc='best')
